package com.example.TTECHT.service.impl;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.TTECHT.dto.repsonse.AuthenticatedResponse;
import com.example.TTECHT.dto.request.AuthenticatedRequest;
import com.example.TTECHT.dto.request.RegisterUserRequest;
import com.example.TTECHT.entity.user.User;
import com.example.TTECHT.enumuration.RoleEnum;
import com.example.TTECHT.repository.user.UserRepository;

import java.time.LocalDateTime;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;

import com.example.TTECHT.service.AuthService;
import com.example.TTECHT.util.JwtUtil;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class AuthServiceImpl implements AuthService {

    private final AuthenticationManager authenticationManager;
    private final PasswordEncoder passwordEncoder;
    private final UserRepository userRepository;
    private final JwtUtil jwtUtil;

   @Override
   public AuthenticatedResponse login(AuthenticatedRequest loginRequest) {
         // Authenticate the user using the provided credentials
        Authentication authentication = authenticationManager.authenticate(
            new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword())
        );

        UserDetails userDetails = (UserDetails) authentication.getPrincipal();
        String token = jwtUtil.generateToken(userDetails);

       return new AuthenticatedResponse(token, true, authentication.getAuthorities());
   }

   @Override
   public String register(RegisterUserRequest registerUserRequest) {
       
        if (userRepository.existsByUsername(registerUserRequest.getUsername())){
            throw new RuntimeException("Username already exists");
        }

        if (userRepository.existsByEmail(registerUserRequest.getEmail())){
            throw new RuntimeException("Email already exists");
        }

        User user = new User(
            null, // ID will be generated by the database
            registerUserRequest.getUsername(),
            registerUserRequest.getEmail(),
            passwordEncoder.encode(registerUserRequest.getPassword()), // Encode the password
            registerUserRequest.getFirstName(),
            registerUserRequest.getLastName(),
            null, 
            null, 
            RoleEnum.USER, // Default role is USER
            true, 
            LocalDateTime.now(), // Creation timestamp
            LocalDateTime.now() // Update timestamp
        );

       userRepository.save(user);
       return "User registered successfully";
   }
}
