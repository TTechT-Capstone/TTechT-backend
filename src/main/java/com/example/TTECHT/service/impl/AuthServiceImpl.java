package com.example.TTECHT.service.impl;

import com.example.TTECHT.dto.request.LogoutRequest;
import com.example.TTECHT.dto.request.RefreshRequest;
import com.example.TTECHT.service.TokenBlacklistService;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.TTECHT.dto.repsonse.AuthenticatedResponse;
import com.example.TTECHT.dto.request.AuthenticatedRequest;
import com.example.TTECHT.dto.request.RegisterUserRequest;
import com.example.TTECHT.entity.user.User;
import com.example.TTECHT.enumuration.RoleEnum;
import com.example.TTECHT.repository.user.UserRepository;

import java.time.LocalDateTime;
import java.util.Date;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;

import com.example.TTECHT.service.AuthService;
import com.example.TTECHT.util.JwtUtil;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class AuthServiceImpl implements AuthService {

    private final AuthenticationManager authenticationManager;
    private final PasswordEncoder passwordEncoder;
    private final UserRepository userRepository;
    private final JwtUtil jwtUtil;
    private final TokenBlacklistService tokenBlacklistService;

    @Override
   public AuthenticatedResponse login(AuthenticatedRequest loginRequest) {
         // Authenticate the user using the provided credentials
        Authentication authentication = authenticationManager.authenticate(
            new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword())
        );

        UserDetails userDetails = (UserDetails) authentication.getPrincipal();
        String token = jwtUtil.generateToken(userDetails);
        String role = userDetails.getAuthorities().stream()
            .findFirst()
            .map(grantedAuthority -> grantedAuthority.getAuthority())
            .orElse(RoleEnum.USER.name()); // Default to USER if no role is found
       return new AuthenticatedResponse(token, true, role);
   }

   @Override
   public String register(RegisterUserRequest registerUserRequest) {
       
        if (userRepository.existsByUsername(registerUserRequest.getUsername())){
            throw new RuntimeException("Username already exists");
        }

        if (userRepository.existsByEmail(registerUserRequest.getEmail())){
            throw new RuntimeException("Email already exists");
        }

        User user = new User(
            null, // ID will be generated by the database
            registerUserRequest.getUsername(),
            registerUserRequest.getEmail(),
            passwordEncoder.encode(registerUserRequest.getPassword()), // Encode the password
            registerUserRequest.getFirstName(),
            registerUserRequest.getLastName(),
            null, 
            null, 
            RoleEnum.USER, // Default role is USER
            true, 
            LocalDateTime.now(), // Creation timestamp
            LocalDateTime.now() // Update timestamp
        );

       userRepository.save(user);
       return "User registered successfully";
   }

    @Override
    public void logout(LogoutRequest request) {
        try {
            String token = request.getToken();

            // Validate token is present
            if (token == null || token.isEmpty()) {
                throw new RuntimeException("Token is required for logout");
            }

            // Remove "Bearer " prefix if present
            if (token.startsWith("Bearer ")) {
                token = token.substring(7);
            }

            // Validate the token
            if (!jwtUtil.validateToken(token)) {
                throw new RuntimeException("Invalid or expired token");
            }

            // Extract token information
            String jti = jwtUtil.extractClaim(token, claims -> claims.get("jti", String.class));
            Date expiration = jwtUtil.extractExpiration(token);


            if (jti != null) {
                tokenBlacklistService.blacklistToken(jti, expiration);
            } else {

                tokenBlacklistService.blacklistToken(token, expiration);
            }

            // Optional: Log the logout event
            String username = jwtUtil.extractUsername(token);
            System.out.println("User " + username + " logged out successfully");

        } catch (RuntimeException e) {
            throw e; // Re-throw runtime exceptions as-is
        } catch (Exception e) {
            throw new RuntimeException("Logout failed: " + e.getMessage(), e);
        }
    }

    @Override
    public AuthenticatedResponse refreshToken(RefreshRequest request) {
        try {
            String token = request.getToken();

            // Validate the token
            if (!jwtUtil.validateToken(token)) {
                throw new RuntimeException("Invalid or expired token");
            }

            // Generate a new token
            UserDetails userDetails = jwtUtil.extractUserDetails(token);
            String newToken = jwtUtil.generateToken(userDetails);

            // Return the new token in the response
            return new AuthenticatedResponse(newToken, true, userDetails.getAuthorities().toString());
        } catch (Exception e) {
            throw new RuntimeException("Failed to refresh token: " + e.getMessage(), e);
        }
    }
}
